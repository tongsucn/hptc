#pragma once
#ifndef HPTC_HPTC_TRANS_TCC_
#define HPTC_HPTC_TRANS_TCC_

/*
 * Implementation for class CGraphTransPack
 */
template <typename FloatType>
class CGraphTransPackBase;


template <typename FloatType>
class CGraphTransPack final : public CGraphTransPackBase<FloatType> {
public:
  CGraphTransPack(const FloatType *in_data, FloatType *out_data,
      const TensorUInt order, const std::vector<TensorUInt> &in_size,
      const std::vector<TensorUInt> &perm,
      const DeducedFloatType<FloatType> alpha,
      const DeducedFloatType<FloatType> beta,
      const TensorUInt num_threads, const TensorInt tune_loop_num,
      const TensorInt tune_para_num, const TensorInt heur_loop_num,
      const TensorInt heur_para_num, const double tuning_timeout_ms,
      const std::vector<TensorUInt> &in_outer_size,
      const std::vector<TensorUInt> &out_outer_size)
      : CGraphTransPackBase<FloatType>(in_data, out_data, order, in_size, perm,
        alpha, beta, num_threads, tune_loop_num, tune_para_num, heur_loop_num,
        heur_para_num, tuning_timeout_ms, in_outer_size, out_outer_size) {
  }

  // Copy and move are disabled
  CGraphTransPack(const CGraphTransPack &) = delete;
  CGraphTransPack<FloatType> operator=(const CGraphTransPack &) = delete;
  CGraphTransPack(CGraphTransPack &&) = delete;
  CGraphTransPack<FloatType> operator=(CGraphTransPack &&) = delete;

  HPTC_INL void exec() {
    this->exec_base_();
  }

  HPTC_INL void operator()() {
    this->exec();
  }
};


/*
 * Import implementations of class CGraphTransPackBase and some explicit
 * template instantiation declaration, this file should be generated by cmake
 * script.
 */
#include <hptc/gen/hptc_trans_base_gen.tcc>

#endif // HPTC_HPTC_TRANS_TCC_
